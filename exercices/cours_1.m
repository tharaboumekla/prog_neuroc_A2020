% brève description de l'interface Matlab.% operations arithmetiques de base1 + 13 - 22 * 31 / 33 ^2sqrt(9)9 ^0.5exp(1)log(exp(2))log10(10 ^3)log2(2 ^10)% https://www.youtube.com/watch?v=593w799sBmssind(90) % en degresin(90)  % en radianpisin(pi/2) % maintenant même ycosd(180) % meme chose avec cos functioncos(180)cos(pi)% serait plus simple d'avoir un convertisseur d'un a l'autre. On peut% définir une variable avec une telle fonction.% definir une variabledeg2rad = pi/180; % regle de trois (π rad = 180°; π/180=0.0175)sin(90 * deg2rad)cos(180 *deg2rad)% attention tout peut etre definirayon = 0.5;circonference = 2*pi*rayonpi = 2;circonference = 2*pi*rayonclear pi % attribuez des noms appropries a vos variables% e.g.: i = sqrt(-1)% definir un vecteur ou une matrice de dimension (1,n)alpha_deg = [0 40 80 120 160 200 240 280 320 360];alpha_deg = [0:40:360];alpha_deg = [1:15:360];alpha_deg = [1:1:360];alpha_deg = [1:360];alpha_rad = alpha_deg * deg2rad% representer les donnees d'un vecteur dans un diagramme de dispersion (scatter plot)figure, subplot(1,2,1),scatter(1:length(alpha_rad),alpha_rad,'filled','k'),title('"raw" alpha radian'), xlabel('index'),ylabel('radian(deg)')set(gcf,'Position',[100 100 1000 500], 'Color', 'w')% repeter une operation a l'aide d'une boucle : un point a la fois. On peut% changer la "resolution" de alpha_degy = 0;ii = 0;subplot(1,2,2),title('sin(alpha radian)'), xlabel('index'),ylabel('sin(radian)')hold onfor alpha = alpha_rad   ii = ii+1;  y(ii) = sin(alpha);  plot(y,'LineWidth',2,'Color','k'),axis([0 length(alpha_deg) -1 1])  pause(.5) % or .01, depending on resolution of alpha_degend% ou, plus simplement, en appliquant une operation directement a un vecteury = sin(alpha_rad);% on peut aussi modifier plusieurs parametre du plot..figure, plot(alpha_deg, y, '-k')help plotxlabel('angle (deg)')ylabel('sin')title('A plot')% On peut modifier les donnees de 2 vecteurs (la frequence ici) a% linterieur meme dune fonction. f1 = 1;f2 = 3;y1 = sin(f1*alpha_rad); % on multiplie un scalaire avec un vecteur ici.y2 = sin(f2*alpha_rad);figure, plot(alpha_deg, y1, 'k', alpha_deg, y2, 'r')xlabel('angle (deg)')ylabel('sin')title('A plot')legend('freq = 1', 'freq = 3')% % % % pause ici ? % % % % % % definir une matrice de dimension (m*n). m = rows, n = columnsb = [[1 2 3]; [4 5 6]; [7 8 9];];bones(3, 3)zeros(3, 3)eye(3, 3)nan(3,3)c = rand(3, 3)% quelques operations matriciellesb + cb * c    % matrix multiplication. Fonctionne seulemnent quand le nombre de columns en [b] (ici 3x3) est egal au nombre de rows dans l'autre matrice [c] (ici aussi 3x3). L'ordre de multiplication est ainsi importante (b*c ~= c*b).b .* c   % help .* inv(c)   % check this out : https://www.mathsisfun.com/algebra/matrix-inverse.htmlc*inv(c) % on retrouve la matrice identity b^2      % was c^2b.^2     % was c.^2sqrt(b)  % was sqrt(c). sqrt des elements de b% extraire une portion de matriceb(1:3,2:3)b(:,1)b(2,:)d = ones(3, 3)e = zeros(3, 3)% on represente les 1 comme present (pale), et 0 comme absent (fonce).figure, imshow(zeros(100,100))petit_damier = ones(6, 6);petit_damier(1:3, 1:3) = e;petit_damier(4:6, 4:6) = e;petit_damier% un exemple de scriptnn = 50;                        % la largeur d'une casee = zeros(nn/2, nn/2);          petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;figure, imshow(petit_damier)end%UTILISER CETTE FONCTION POUR LE TRAVAIL ET UTILISER 2 BOUCLES FOR% Devoir : �crire un script (ou une fonction) qui dessine un grand_damier semblable au petit_damier de 2*N x 2*M cases en utilisant le petit_damier et des boucles.for grand_damier = petit_damiergrand_damier = ones(nn, nn);nn = 50; % la largeur d'une casezeros(3,3);e = zeros(nn/2, 1:1);          petit_damier = ones(nn, 1:1);petit_damier(1:nn/2, 1:1) = e;petit_damier(nn/2+1:nn, 1:1) = e;grand_damier = petit_damier;endfor grand_damier_column = petit_damier_columngrand_damier_column = ones(nn,nn);nn = 50;% la largeur d'une casezeros(3,3);e = zeros(1:1, nn/2);          petit_damier_column = ones(1:1, nn);petit_damier_column(1:1, 1:nn/2) = e;petit_damier_column(1:1, nn/2+1:nn) = e;grand_damier_column = petit_damier_column;endfigure, imshow(grand_damier)figure, imshow(grand_damier_column)ii = 0;for petit_dam(ii) = petit_damiernn = 50;ii = ii + 1;nn = nn + ii;e = zeros(ii/2, ii/2);petit_damier = ones(ii, ii);petit_damier(1:ii/2, 1:ii/2) = e;petit_damier(ii/2+1:ii, ii/2+1:ii) = e;endfigure, imshow(petit_dam)for grand_damier = petit_dam    nn = 50;   for petit_damier = petit_dam       e = zeros(nn/2, nn/2);       petit_damier = ones(nn, nn);       petit_damier(1:nn/2, 1:nn/2) = e;       petit_damier(nn/2+1:nn, nn/2+1:nn) = e;       petit_damier = petit_dam;   end   petit_dam = grand_damier;endfigure, imshow(grand_damier)           for grand_damier = petit_dam    petit_dam = ones(nn, nn);for petit_dam = petit_damiernn = 50;zeros(nn/2, nn/2);e = zeros(nn/2, nn/2);petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;endpetit_dam = grand_damier;endfigure, imshow(grand_damier)for grand_damier = petit_damnn = 50;petit_dam = ones(nn, nn);for petit_damier = grand_damiernn = 50;ones(nn, nn);zeros(nn/2, nn/2);e = zeros(nn/2, nn/2);petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;petit_damier = grand_damier;endpetit_dam = grand_damier;endfor grand_damier = petit_damnn = 50;petit_dam = ones(nn, nn);for petit_dam = petit_damiernn = 50;zeros(nn/2, nn/2);e = zeros(nn/2, nn/2);petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;petit_damier = petit_dam;endendfigure, imshow(grand_damier)nn = 50;ones(nn/2, nn/2);e = ones(nn/2, nn/2);petit_dam = zeros(nn, nn);petit_dam(1:nn/2, 1:nn/2) = e;petit_dam(nn/2+1:nn, nn/2+1:nn) = e;figure, imshow(petit_dam)for petit_damier = petit_damier(nn, nn)nn = 1000;zeros(nn/2, nn/2);e = zeros(nn/2, nn/2);petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;for petit_dam = petit_dam(nn, nn)nn = 1000;ones(nn/2, nn/2);e = ones(nn/2, nn/2);petit_dam = zeros(nn, nn);petit_dam(1:nn/2, 1:nn/2) = e;petit_dam(nn/2+1:nn, nn/2+1:nn) = e;endgrand_damier = petit_damier - petit_dam;endfigure, imshow(grand_damier)for petit_damier = petit_damiernn = 1000;zeros(nn/2, nn/2);e = zeros(nn/2, nn/2);petit_damier = ones(nn, nn);petit_damier(1:nn/2, 1:nn/2) = e;petit_damier(nn/2+1:nn, nn/2+1:nn) = e;for petit_dam = petit_damnn = 1000;ones(nn/2, nn/2);e = ones(nn/2, nn/2);petit_dam = zeros(nn, nn);petit_dam(1:nn/2, 1:nn/2) = e;petit_dam(nn/2+1:nn, nn/2+1:nn) = e;endgrand_damier = petit_damier - petit_dam;endfigure, imshow(grand_damier)petit_damier = ones(6, 6);petit_damier(1:3, 1:3) = e;petit_damier(4:6, 4:6) = e;petit_damier;for grand_damier = nn.*petit_damier    taille_pet_dam = 50zeros(taille_pet_dam/2, taille_pet_dam/2);e = zeros(taille_pet_dam/2, taille_pet_dam/2);petit_damier = ones(taille_pet_dam, taille_pet_dam);petit_damier(1:taille_pet_dam/2, 1:taille_pet_dam/2) = e;petit_damier(taille_pet_dam/2+1:taille_pet_dam, taille_pet_dam/2+1:taille_pet_dam) = e;m_rangees = 6;n_colonnes = 6;grand_damier = (zeros(m_rangees*taille_pet_dam, n_colonnes*taille_pet_dam));for i = 1:taille_pet_dam:m_rangees    for j = 1:taille_pet_dam:n_colonnes        grand_damier((i-1)*taille_pet_dam+1:taille_pet_dam*i,  (j-1)*taille_pet_dam+1:taille_pet_dam*j) = petit_damier;    endend